[{"/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/index.tsx":"1","/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/pages/LogIn.tsx":"2","/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/navigation/PrivateRoute.tsx":"3","/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/gql/mutations/signIn.ts":"4","/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/App.tsx":"5","/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/pages/Home.tsx":"6","/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/reactive-vars.ts":"7","/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/gql/mutations/uploadBook.ts":"8"},{"size":1130,"mtime":1610375592369,"results":"9","hashOfConfig":"10"},{"size":11161,"mtime":1610376261592,"results":"11","hashOfConfig":"10"},{"size":922,"mtime":1610300514497,"results":"12","hashOfConfig":"10"},{"size":483,"mtime":1610375685217,"results":"13","hashOfConfig":"10"},{"size":855,"mtime":1610375108379,"results":"14","hashOfConfig":"10"},{"size":2656,"mtime":1610376649006,"results":"15","hashOfConfig":"10"},{"size":207,"mtime":1610375275568,"results":"16","hashOfConfig":"10"},{"size":350,"mtime":1610293159138,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"aj0tky",{"filePath":"22","messages":"23","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/index.tsx",["37"],"import    React               from  \"react\";\nimport    ReactDOM            from  \"react-dom\";\nimport    App                 from  \"./App\";\nimport    reportWebVitals     from  \"./reportWebVitals\";\nimport    { ApolloClient, \n            ApolloClientOptions,\n            ApolloProvider,  \n            InMemoryCache, \n            NormalizedCacheObject, \n            HttpLink}   from \"@apollo/client\";\n\nimport \"./index.css\";\n\nconst uri = \"http://localhost:4000/graphql\";\n\nconst link = new HttpLink({\n  uri\n});\n\nconst cache = new InMemoryCache( );\n\nconst options: ApolloClientOptions<NormalizedCacheObject> = {\n  cache, \n  uri\n};\n\nconst client = new ApolloClient( options );\n\nReactDOM.render(\n  // <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  // </React.StrictMode>,\n  ,document.getElementById( \"root\" ) \n  );\n\nconsole.info(`client has been rendered.`);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals( );\n",["38","39"],"/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/pages/LogIn.tsx",["40","41","42","43","44","45","46","47","48","49","50","51","52"],"import      React, { FunctionComponent, useState }  from        \"react\";\nimport      { ArrowBack }                           from        \"@material-ui/icons\";\nimport      { useMutation }                         from        \"@apollo/client\";\nimport      { validate }                            from        \"email-validator\";\nimport      { SIGN_IN }                             from        \"../gql/mutations\";\nimport      TextField                               from        \"@material-ui/core/TextField\";\nimport      Button                                  from        \"@material-ui/core/Button\";\nimport      CircularProgress                        from        \"@material-ui/core/CircularProgress\";\nimport      SignInData                              from        \"../classes/SignInResponse\";\nimport      Alert                                   from        \"@material-ui/lab/Alert\";\nimport      { Redirect, \n              useHistory }                          from        \"react-router-dom\";\nimport      { userVar }                             from        \"../reactive-vars\";\n\nimport \"./LogIn.css\";\n\n\nconst LogInForm: FunctionComponent<any> = ( { setSignIn }: any ) => {\n\n    return (\n        <div className={\"log-in-form\"}>\n\n            <h3>\n                LogIn\n            </h3>\n\n            <input className={\"login-input\"} type={\"text\"} id={\"username\"} placeholder={\"username\"} />\n\n            <input className={\"login-input\"} type={\"password\"} id={\"password\"} placeholder={\"password\"} />\n\n            <p className={\"login-signin-link\"} onClick={ ()=>{  setSignIn( true ); } }> \n                Or sign in instead\n            </p>\n\n        </div>\n    );\n}\n\nenum UserInfo\n{   \n    OK             = 0,\n\n    SMALL_USERNAME = 1,\n    USERNAME_ALREADY_EXISTS, \n\n    INVALID_EMAIL = 10, \n    EMAIL_ALREADY_USED, \n\n    SMALL_PASSWORD = 20,\n    NO_SPECIAL_CHARS, \n    NO_LOWER_CASE_CHARS, \n    NO_UPPER_CASE_CHARS\n}\n\nenum ErrorType\n{\n    INTERNAL = 0, \n}\n\nconst helperTexts = {\n    1: \"username must have at least 4 characters.\", \n    2: \"this username name already exists.\",\n    \n    10: \"Please, fill in a valid email address.\", \n    11: \"this email has arealy been used.\", \n\n    20: \"password must be at least 6 characters long.\",\n    21: \"password must contain at least 1 special character\",\n    22: \"password must contain at least 1 lowecase character.\",\n    23: \"password must contain at least 1 uppercase character.\",\n}\n\nconst SignInForm: FunctionComponent<any> = ( { setSignIn }: any ) => {\n\n    const usernameId = \"sign-in-username\";\n    const emailId    = \"sign-in-email\";\n    const pwdId      = \"sign-in-password\";\n\n    let username: string    = ( document.getElementById( usernameId ) as any )?.value    ??    \"\";\n    let email:    string    = ( document.getElementById( emailId )    as any )?.value    ??    \"\";\n    let pwd:      string    = ( document.getElementById( pwdId )      as any )?.value    ??    \"\";\n\n    const [ pwdStatus,      setPwdStatus      ]     =   useState( UserInfo.OK );\n    const [ emailStatus,    setEmailStatus    ]     =   useState( UserInfo.OK );\n    const [ usernameStatus, setUsernameStatus ]     =   useState( UserInfo.OK );\n\n    const [ signIn, { data, error, loading } ] = useMutation<SignInData>( SIGN_IN );\n\n    const history = useHistory( );\n\n\n    const validatePwd = ( pwd: string ): boolean => { \n        const re1 = new RegExp( \"[\\$@!&\\*#%+-]\" );\n        const re2 = new RegExp( \"[A-Z]\" );\n        const re3 = new RegExp( \"[a-z]\");\n\n        let isValid = false;\n\n        if( pwd.length < 6 )\n        {\n            setPwdStatus( UserInfo.SMALL_PASSWORD );\n        }\n        else if( !re1.test( pwd ) )\n        {\n            setPwdStatus( UserInfo.NO_SPECIAL_CHARS ); \n        }\n        else if( !re2.test( pwd ) )\n        {\n            setPwdStatus( UserInfo.NO_UPPER_CASE_CHARS ); \n        }\n        else if( !re3.test( pwd ) )\n        {\n            setPwdStatus( UserInfo.NO_LOWER_CASE_CHARS ); \n        }\n        else if( pwdStatus != UserInfo.OK )\n        {\n            setPwdStatus( UserInfo.OK ); \n\n            isValid = true;\n        }\n        else \n        {\n            isValid = true;\n        }\n\n        return isValid;\n    };\n    const validateEmail = ( email: string ): boolean =>{\n        \n        let isValid = true;\n\n        if( !validate( email ) )\n        {\n            setEmailStatus( UserInfo.INVALID_EMAIL );\n\n            isValid = false;\n        }\n        else if( emailStatus != UserInfo.OK )\n        {\n            setEmailStatus( UserInfo.OK );\n        }\n\n        return isValid;\n    };\n    const validateUsername = ( username: string ): boolean =>{\n\n        let isValid = true;\n\n        if( username.length < 4 )\n        {\n            setUsernameStatus( UserInfo.SMALL_USERNAME );\n\n            isValid = false;\n        }\n        else if( usernameStatus !== UserInfo.OK )\n        {\n            setUsernameStatus( UserInfo.OK );\n        }\n\n        return isValid;\n    };\n\n    const disabled = pwdStatus      !== UserInfo.OK || \n                     emailStatus    !== UserInfo.OK || \n                     usernameStatus !== UserInfo.OK || \n                     loading;\n\n    console.info( data, error, loading );\n    \n    let err = null;\n\n    if( error )\n    {\n        console.error( \"internal error: \", error );\n        err = ErrorType.INTERNAL;\n    }\n    else if( !data || !data.signIn )\n    {\n        // another type of error\n    }\n    else if ( data && data.signIn )\n    {\n\n        const { user, statusCode } = data.signIn;\n\n        if( statusCode  == 0 )\n        {\n            userVar( user );\n\n            history.push( \"/home\" );\n\n            // return (\n            //     <Redirect to={\"/home\"}/>\n            // )\n        }\n    }\n\n    return (\n        <div \n            className={\"log-in-form\"}>\n\n            <div className={ \"sign-in-header\" }>\n\n                <ArrowBack \n                    className = { \"login-sign-arrow\" } \n                    onClick   = { () => {\n                                    setSignIn( false );  \n                                 } \n                                }/>\n                <h3>\n                    SignIn\n                </h3>\n\n            </div>\n\n            <div className={ \"sign-in-body\" }>\n\n                <TextField \n                    label       = { \"username\" } \n                    variant     = { \"outlined\" } \n                    size        = { \"small\" } \n                    className   = { \"sign-in-input\" }\n                    id          = { usernameId } \n                    onBlur      = { ({ target }) => { \n                                        username = target.value;\n                                        \n                                        validateUsername( username );\n                                    } \n                                }\n                    error       = { usernameStatus != UserInfo.OK }\n                    helperText  = { usernameStatus != UserInfo.OK ? helperTexts[usernameStatus] : \"\" }\n                />\n\n                <TextField\n                    label       = { \"email\" } \n                    variant     = { \"outlined\" }\n                    size        = { \"small\" }                \n                    className   = { \"sign-in-input\" }\n                    id          = { emailId } \n                    placeholder = { \"email\" } \n                    onBlur      = { ({ target }) => {\n                                        \n                                        email = target.value;\n                                        \n                                        validateEmail( email );\n                                    }\n                                } \n                    error       = { emailStatus != UserInfo.OK }\n                    helperText  = { emailStatus != UserInfo.OK ? helperTexts[emailStatus] : \"\" }\n                    />\n\n                <TextField\n                    label       = { \"password\" }\n                    variant     = { \"outlined\" }\n                    size        = { \"small\" }\n                    className   = { \"sign-in-input\" } \n                    type        = { \"password\" } \n                    id          = { pwdId } \n                    onBlur      = { ({ target }) => {\n\n                                        pwd = target.value; \n\n                                        validatePwd( pwd );\n                                    } \n                                }\n                    error       = { pwdStatus != UserInfo.OK }\n                    helperText  = { pwdStatus != UserInfo.OK ? helperTexts[pwdStatus] : \"\" }\n                    />\n\n            </div> \n            \n            <div className={ \"sign-in-foot\" }> \n\n                <Button\n                    variant={\"contained\"}\n                    color={\"primary\"}\n                    onClick   = { () => {\n                                        if( !validateUsername( username ) || \n                                            !validateEmail( email ) ||\n                                            !validatePwd( pwd )\n                                        ) \n                                        {\n                                            return;\n                                        }\n\n                                        const opts = { variables: { username, email, pwd } };\n\n                                        signIn( opts ).catch( err => { /*just catch it and do nothing */ } );\n                                    } \n                                }\n                    disabled = { disabled || loading  }>\n                    \n                    {\n                        loading ? \n                            ( \n                                <div>\n                                    Loading \n                                    <CircularProgress\n                                        size={10}\n                                        thickness={4} />\n                                </div>\n                            )\n                        : \n                            (\n                                <div>\n                                    Sign In  \n                                </div>\n                            )\n                    }\n                </Button>\n\n                <div>\n                    {\n                        error ? \n                        (   \n                            <div>\n                                <Alert severity={\"error\"}> An internal error occurred! Please, contact our support service.</Alert>\n                            </div>\n                        )\n                        :\n                        (\n                            <p></p>\n                        )\n                    }\n                </div>\n\n            </div>\n\n        </div>\n    );\n\n}\n\nconst LogInPage: FunctionComponent<any> = (_: any) => {\n\n    const [ signIn, setSignIn ] = useState( false );\n    \n    return (\n        <div className={\"login-main-container\"}>\n            {\n                signIn ? ( <SignInForm  setSignIn={setSignIn} /> ) \n                       : ( <LogInForm setSignIn={setSignIn} /> )\n            }\n        </div>\n    );\n}\n\nexport default LogInPage;","/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/navigation/PrivateRoute.tsx",[],"/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/gql/mutations/signIn.ts",[],"/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/App.tsx",[],"/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/pages/Home.tsx",["53"],"/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/reactive-vars.ts",[],"/home/rseusebio/Codes/studylab_project/ebookhub-frontend/src/gql/mutations/uploadBook.ts",[],{"ruleId":"54","severity":1,"message":"55","line":16,"column":7,"nodeType":"56","messageId":"57","endLine":16,"endColumn":11},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"54","severity":1,"message":"62","line":11,"column":15,"nodeType":"56","messageId":"57","endLine":11,"endColumn":23},{"ruleId":"63","severity":1,"message":"64","line":93,"column":35,"nodeType":"65","messageId":"66","endLine":93,"endColumn":36,"suggestions":"67"},{"ruleId":"63","severity":1,"message":"68","line":93,"column":40,"nodeType":"65","messageId":"66","endLine":93,"endColumn":41,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":115,"column":28,"nodeType":"72","messageId":"73","endLine":115,"endColumn":30},{"ruleId":"70","severity":1,"message":"71","line":138,"column":30,"nodeType":"72","messageId":"73","endLine":138,"endColumn":32},{"ruleId":"54","severity":1,"message":"74","line":175,"column":9,"nodeType":"56","messageId":"57","endLine":175,"endColumn":12},{"ruleId":"70","severity":1,"message":"75","line":186,"column":25,"nodeType":"72","messageId":"73","endLine":186,"endColumn":27},{"ruleId":"70","severity":1,"message":"71","line":230,"column":52,"nodeType":"72","messageId":"73","endLine":230,"endColumn":54},{"ruleId":"70","severity":1,"message":"71","line":231,"column":52,"nodeType":"72","messageId":"73","endLine":231,"endColumn":54},{"ruleId":"70","severity":1,"message":"71","line":248,"column":49,"nodeType":"72","messageId":"73","endLine":248,"endColumn":51},{"ruleId":"70","severity":1,"message":"71","line":249,"column":49,"nodeType":"72","messageId":"73","endLine":249,"endColumn":51},{"ruleId":"70","severity":1,"message":"71","line":266,"column":47,"nodeType":"72","messageId":"73","endLine":266,"endColumn":49},{"ruleId":"70","severity":1,"message":"71","line":267,"column":47,"nodeType":"72","messageId":"73","endLine":267,"endColumn":49},{"ruleId":"70","severity":1,"message":"71","line":67,"column":39,"nodeType":"72","messageId":"73","endLine":67,"endColumn":41},"@typescript-eslint/no-unused-vars","'link' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["76"],"no-negated-in-lhs",["77"],"'Redirect' is defined but never used.","no-useless-escape","Unnecessary escape character: \\$.","Literal","unnecessaryEscape",["78","79"],"Unnecessary escape character: \\*.",["80","81"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'err' is assigned a value but never used.","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"messageId":"82","fix":"83","desc":"84"},{"messageId":"85","fix":"86","desc":"87"},{"messageId":"82","fix":"88","desc":"84"},{"messageId":"85","fix":"89","desc":"87"},"removeEscape",{"range":"90","text":"91"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"92","text":"93"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"94","text":"91"},{"range":"95","text":"93"},[3375,3376],"",[3375,3375],"\\",[3380,3381],[3380,3380]]